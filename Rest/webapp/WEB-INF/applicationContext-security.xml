<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:security="http://www.springframework.org/schema/security"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/security 
                        http://www.springframework.org/schema/security/spring-security-3.1.xsd
                        http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd" >

	
	<security:global-method-security pre-post-annotations="enabled" />
	
	<!--context:annotation-config/-->

	<context:component-scan base-package="com.capgemini.service"/>
 	<context:component-scan base-package="com.capgemini.persistence"/>
  	<context:component-scan base-package="com.capgemini.configuration"/>
	
	<security:http pattern="/static/**" security="none" />

	<security:http use-expressions="true">
		<security:access-denied-handler ref="accessDeniedHandler" />
		<security:intercept-url pattern="/" access="permitAll" />
		<security:intercept-url pattern="/service/login" access="permitAll" />
        <security:intercept-url pattern="/service/logout" access="permitAll" />
		<security:intercept-url pattern="/service/book*/**" access="permitAll" />
		<security:intercept-url pattern="/service/image*/**" access="permitAll" />
		<security:intercept-url pattern="/service/search/**" access="hasRole('ADMIN')" />
		
		<!-- getsocial pages -->
		<security:intercept-url pattern="/service/twitter-login" access="isAuthenticated()" />
		<security:intercept-url pattern="/service/start" access="isAuthenticated()" />
		<security:intercept-url pattern="/service/myaccount" access="isAuthenticated()" />
		<security:intercept-url pattern="/service/campaigns" access="isAuthenticated()" />
		<security:intercept-url pattern="/service/campaign-steps" access="isAuthenticated()" />
		<security:intercept-url pattern="/service/campaign-add" access="isAuthenticated()" />
		<security:intercept-url pattern="/service/campaign-step-add" access="isAuthenticated()" />
		
		<security:form-login login-page="/service/login" default-target-url="/service/start" authentication-failure-url="/service/loginfailed" />
		<security:logout logout-success-url="/service/logout" />
		
		
	</security:http>

   	<bean id="accessDeniedHandler" class="com.capgemini.handler.MyAccessDeniedHandler">
		<property name="accessDeniedUrl" value="403" />
   	</bean>

	<!-- it works too -->
	<!--security:authentication-manager>
		<security:authentication-provider ref="daoAuthenticationProvider" />
	</security:authentication-manager-->


	<security:authentication-manager>
		<security:authentication-provider>
		<security:password-encoder hash="md5" />
		<security:jdbc-user-service data-source-ref="dataSource"
		
		users-by-username-query="
                select Login, Password, Active
                from Users
                where Login=?"
 
		authorities-by-username-query="
		    	select u.Login, a.Role 
		    	from Users u
                join Authorities a on u.UserId = a.UserId
                where u.Login=?"
		/>
	   </security:authentication-provider>
	</security:authentication-manager>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		 <constructor-arg>
			<list>
				<bean class="com.capgemini.security.TimeVoter" />
				<bean class="org.springframework.security.web.access.expression.WebExpressionVoter"/>
			</list>
		</constructor-arg> 
	</bean>
</beans>
